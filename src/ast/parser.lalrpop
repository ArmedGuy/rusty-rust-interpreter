use std::str::FromStr;

use crate::ast::*;

grammar;

match {
    // The default whitespace skipping is disabled an `ignore pattern` is specified
    r"\s*" => { }, 
    // Skip `// comments`
    r"//[^\n\r]*" => { }, 
    // Skip `/* comments */`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { },  
    "i32",
    "bool",
    "String",
    "{",
    "}",
    "()",
    "(",
    ")",
    ";",
    "-",
    "+",
    "*",
    "/",
    ",",
    "!",
    "&&",
    "||",
    "==",
    "=",
    "<",
    ">",
    ":",
    "true",
    "false",
    "fn",
    "while",
    "if",
    "else",
    "else if",
    "return",
    "let",
    "&",
    "&mut",
    "mut",
    r"[0-9]+",
    r"([a-z_]|[A-Z])([a-z]|[A-Z]|[0-9]|_)*",
    "->",
    r"'(.*)'",
    _
}


// Primitives
pub Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap(),
};

pub Bool: bool = {
    "true" => true,
    "false" => false
}

Str: String = {
    r"'(.*)'" => String::from_str(<>).unwrap(),
}

Identifier: String = {
    r"([a-z_]|[A-Z])([a-z]|[A-Z]|[0-9]|_)*" => String::from_str(<>).unwrap(),
};


// Expression
pub ExtendedExpr: Box<Expr> = {
    Expr,
    <l:@L> <s:BlockStatement> <r:@R> => Box::new(Expr::BlockExpr(s, CodeSpan::new(l, r))),
    <l:@L> <s:ConditionalStatement> <r:@R> => Box::new(Expr::ConditionalExpr(s, CodeSpan::new(l, r))),
};
pub Expr: Box<Expr> = {
    //NumExpr,
    //BoolExpr,
    CalculatedExpr,
};

// calculated expressions
CalculatedExpr: Box<Expr> = {
    <l:@L> <e1:CalculatedExpr> <op:BoolExprOp> <e2:CalculatedTerm> <r:@R> => Box::new(Expr::Op(e1, op, e2, CodeSpan::new(l, r))),
    <l:@L> <e1:CalculatedExpr> <op:BoolExprRetOp> <e2:CalculatedTerm> <r:@R> => Box::new(Expr::Op(e1, op, e2, CodeSpan::new(l, r))),
    <l:@L> <e1:CalculatedExpr> <op:ExprOp> <e2:CalculatedFactor> <r:@R> => Box::new(Expr::Op(e1, op, e2, CodeSpan::new(l, r))),
    CalculatedFactor,
};

CalculatedFactor: Box<Expr> = {
    <l:@L> <e1:CalculatedFactor> <op:FactorOp> <e2:CalculatedTerm> <r:@R> => Box::new(Expr::Op(e1, op, e2, CodeSpan::new(l, r))),
    CalculatedTerm
};

CalculatedTerm: Box<Expr> = {
    FuncExpr,
    BoolTerm,
    NumTerm,
    StrTerm,
    "&" <CalculatedTerm> => Box::new(Expr::Borrow(false, <>)),
    "&mut" <CalculatedTerm> => Box::new(Expr::Borrow(true, <>)),
    "*" <CalculatedTerm> => Box::new(Expr::Dereference(<>)),
    <l:@L> <i:Identifier> <r:@R> => Box::new(Expr::Identifier(i, CodeSpan::new(l, r))),
    <l:@L> <op:ModExprOp> <t:CalculatedTerm> <r:@R> => Box::new(Expr::ModOp(op, t, CodeSpan::new(l, r))),
    "(" <CalculatedExpr> ")",
};

ModExprOp: Opcode = {
    "!" => Opcode::Neg,
    "-" => Opcode::Sub,
}

ExprOp: Opcode = { // (3)
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

NumTerm: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
};
BoolTerm: Box<Expr> = {
    Bool => Box::new(Expr::Boolean(<>)),
};
StrTerm: Box<Expr> = {
    Str => Box::new(Expr::Str(<>)),
};

BoolExprOp: Opcode = {
    "&&" => Opcode::And,
    "||" => Opcode::Or,
    "==" => Opcode::Is,
};

BoolExprRetOp: Opcode = {
    "<" => Opcode::LessThen,
    ">" => Opcode::GreaterThen,
};

Exprs = Comma<Expr>; // (0)

Comma<T>: Vec<T> = { // (1)
    <v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

FuncExpr: Box<Expr> = {
    <l:@L> <i:Identifier> "(" <e:Exprs> ")" <r:@R> => Box::new(Expr::Function(i, e, CodeSpan::new(l, r))),
    <l:@L> <i:Identifier> "()" <r:@R> => Box::new(Expr::Function(i, vec![], CodeSpan::new(l, r))),
};

Type: Typedef = {
    "()" => Typedef::Unit,
    "bool" => Typedef::Bool,
    "i32" => Typedef::I32,
    "String" => Typedef::Str,
    "&" <Type> => Typedef::Ref(false, Box::new(<>)),
    "&mut" <Type> => Typedef::Ref(true, Box::new(<>)),
}

VarDef: Box<Statement> = {
    <i:Identifier> ":" <t:Type> => Box::new(Statement::VarDef(i, t))
}

// Statement
pub Statement: Box<Statement> = {
    <i:IStatement> => i,
};

IStatement: Box<Statement> = {
    <FuncStatement> ";"?,
    <DefineStatement> ";",
    <AssignStatement> ";",
    <ConditionalStatement> ";"?,
    <LoopStatement> ";"?,
    <BlockStatement> ";"?,
    <l:@L> <e:Expr> ";" <r:@R> => Box::new(Statement::Expr(e, CodeSpan::new(l, r)))
};

ReturnStatement: Box<Statement> = {
    <l:@L> "return" <e:Expr> ";"? <r:@R> => Box::new(Statement::Return(e, CodeSpan::new(l, r))),
    <l:@L> <e:Expr> <r:@R> => Box::new(Statement::Return(e, CodeSpan::new(l, r)))
}

FuncArgs = Comma<VarDef>;

pub FuncStatement: Box<Statement> = {
    <l:@L> "fn" <i:Identifier> "(" <f:FuncArgs> ")" <t:("->" <Type>)?> <r:@R> <b:BlockStatement> => Box::new(Statement::Function(i, f, t, b, CodeSpan::new(l, r))),
    <l:@L> "fn" <i:Identifier> "()" <t:("->" <Type>)?> <r:@R> <b:BlockStatement> => Box::new(Statement::Function(i, vec![], t, b, CodeSpan::new(l, r))),
};

BlockStatement: Box<Statement> = {
    <l:@L> "{" <r:@R> <s:Statement*> <ret:ReturnStatement?>"}" => Box::new(Statement::Block(s, ret, CodeSpan::new(l, r))),
};

DefineStatement: Box<Statement> = {
    <l:@L> "let" <m:"mut"?> <v:VarDef> "=" <r:@R> <e:ExtendedExpr> => Box::new(Statement::Definition(m.is_some(), v, e, CodeSpan::new(l, r))),
    <l:@L> "let" <m:"mut"?> <i:Identifier> "=" <r:@R> <e:ExtendedExpr> => Box::new(Statement::Definition(m.is_some(), Box::new(Statement::VarDef(i, Typedef::Implicit)), e, CodeSpan::new(l, r))),
};

AssignStatement: Box<Statement> = {
    <l:@L> <i:Identifier> "=" <r:@R> <e:ExtendedExpr> => Box::new(Statement::Assignment(i, e, CodeSpan::new(l, r))),
};

ConditionalStatement: Box<Statement> = {
    <l:@L> "if" <e:Expr> <r:@R> <b:BlockStatement> <next:NextConditionalStatement?> => Box::new(Statement::Conditional(ConditionalType::If, Some(e), b, next, CodeSpan::new(l, r)))
};

NextConditionalStatement: Box<Statement> = {
    ElseIfStatement,
    ElseStatement
};

ElseIfStatement: Box<Statement> = {
    <l:@L> "else if" <e:Expr> <r:@R> <b:BlockStatement> <next:NextConditionalStatement?> => Box::new(Statement::Conditional(ConditionalType::ElseIf, Some(e), b, next, CodeSpan::new(l, r)))
};

ElseStatement: Box<Statement> = {
    <l:@L> "else" <r:@R> <b:BlockStatement> => Box::new(Statement::Conditional(ConditionalType::Else, None, b, None, CodeSpan::new(l, r)))
};

LoopStatement: Box<Statement> = {
    <l:@L> "while" "(" <e:Expr> ")" <r:@R> <b:BlockStatement> => Box::new(Statement::WhileLoop(e, b, CodeSpan::new(l, r)))
};

pub Program: Box<Statement> = {
    <l:@L> <s:Statement+> <r:@R> => Box::new(Statement::Program(s, CodeSpan::new(l, r)))
}